[ { "title": "내가 보려고 쓰는 글쓰기용 명령어와 도구들", "url": "/posts/my-new-post/", "categories": "Other, scrap", "tags": "scrap, tools", "date": "2022-02-02 21:14:00 +0900", "snippet": "글 하나 쓸때마다 검색으로 탭이 죽죽늘어나서.. 기록jekyll 로컬 서버 실행jekyll servejekyll-composer새 글쓰기 bundle exec jekyll page &quot;My New Page&quot;새 작성중 글 bundle exec jekyll draft &quot;My new draft&quot;작성 중인 글 서버에서 확인 bundle exec jekyll compose &quot;My new draft&quot; --draft작성 중인 글 발행 bundle exec jekyll publish _drafts/my-new-draft.m기타 링크Link: 이미지 호스팅 imgBB Link: HTML마크업을 트리로 생성 Link: 깃헙, 지킬 emoji markup Link: Jekyll::Compose Link: 마크다운작성법 Link: Chirpy 테마 글쓰기" }, { "title": "70. PROJECT.1 업다운", "url": "/posts/70-project-updown/", "categories": "강의기록, U)Javascript", "tags": "challenge", "date": "2022-02-02 21:03:00 +0900", "snippet": "70. PROJECT #1: 숫자 맞추기 (UpDown)페이지에서 임의로 생선된 숫자를 사용자가 맞추는 게임수는 1부터 20까지, 체크당 스코어 1점 감소되며, 가장 빨리 맞췄을 때 남은 점수가 하이스코어로 기록된다HTML 구조와 화면Javascript변수 선언let secretNumber = Math.trunc(Math.random() * 20) + 1;let score = 20;let highScore = 0; secretNumber : 1부터 20까지 생성되는 무작위 수로 사용자가 맞춰야 할 수 score: 20점부터 시작하며 한번 check할 때 마다 1점씩 감소한다. highscore: 사용자가 secretNumber를 가장 빨리 맞췄을 때 기록된다.시나리오 로직INPUT.guess에 값을 입력하고 BUTTON.check을 누르면 로직 시작 동률일 경우 score를 highScore와 비교하여 초과일때만 highScore에 표시/배경화면 색 변경 추측한 수가 랜덤수와 같을 때: 배경 색 변경, 메세지 변경, 숫자 표시 및 너비 증가 추측한 수 &amp;gt; 랜덤수가 다를 때: guess &amp;gt; secretNumber로 비교하여 true일때 ‘Too high’ false일때 ‘Too Low’ 출력(삼항연산자 사용) 동시에 score 1씩 감소, score가 1이되면 게임 종료, 메시지 변경document.querySelector(&quot;.check&quot;).addEventListener(&quot;click&quot;, function () { const guess = Number(document.querySelector(&quot;.guess&quot;).value); if (!guess) { // 아무 값이 없을때 displayMessage(&quot;🤔 No number!&quot;); } else if (guess === secretNumber) { // 플레이어가 이겼을 때 displayMessage(&quot;🎉 Correct Number!&quot;); document.querySelector(&quot;.number&quot;).textContent = secretNumber; document.querySelector(&quot;body&quot;).style.backgroundColor = &quot; #60b347&quot;; document.querySelector(&quot;.number&quot;).style.width = &quot;30rem&quot;; // rem을쓰기위해 문자열로 // 5) 하이스코어 기능 if (score &amp;gt; highScore) { highScore = score; document.querySelector(&quot;.highscore&quot;).textContent = highScore; } } else if (guess !== secretNumber) { // 제출 숫자가 secretNumber와 다를 때 if (score &amp;gt; 1) { displayMessage(guess &amp;gt; secretNumber ? &quot;📈 Too high!&quot; : &quot;📉 Too Low!&quot;); score--; document.querySelector(&quot;.score&quot;).textContent = score; } else { displayMessage(&quot;😡 You lost the game!&quot;); document.querySelector(&quot;.score&quot;).textContent = 0; } }});again 버튼 이벤트 처리(챌린지였던것)플레이어가 새로운 추측을 할 수 있도록 기능을 구현하십시오! ‘again’ 클래스가 있는 요소를 선택하고 클릭 이벤트 핸들러를 연결합니다. 핸들러 기능에서 ‘score’ 및 ‘secretNumber’ 변수의 초기 값을 복원합니다. 메시지, number, score 및 추측 입력 필드의 초기 조건을 복원합니다. 또한 원래 배경색 (#222)과 숫자 너비 (15rem)를 복원합니다.document.querySelector(&quot;.again&quot;).addEventListener(&quot;click&quot;, function () { score = 20; secretNumber = Math.trunc(Math.random() * 20) + 1; document.querySelector(&quot;.score&quot;).textContent = score; displayMessage(&quot;Start guessing...&quot;); document.querySelector(&quot;.guess&quot;).value = &quot;&quot;; document.querySelector(&quot;.number&quot;).textContent = &quot;?&quot;; document.querySelector(&quot;.number&quot;).style.width = &quot;15rem&quot;; document.querySelector(&quot;body&quot;).style.backgroundColor = &quot;#222&quot;;});중복코드 제거 및 포인트const displayMessage = function (message) { document.querySelector(&quot;.message&quot;).textContent = message;};(이미 강의들으면서 로직내에선 변경한 함수로 반영됐지만) document.querySelector(‘.message’).textContent 로 메세지가 자주 변경되기 때문에 바꿀 메세지 내용을 인자로 받는 함수로 변경해서 호출하는 방법으로 변경. 대략 5번 정도 호출되었다..! 또, inpuit이 Number일때는 value=”“;로 값을 변경한다는 것. .textContent만 쓰다가 왜 변경이 안되지 했던 기억이. 추가로 style메서드로 #, rem, px같은 단위를 쓸 땐 &#39; &#39;로 묶어줄 것." }, { "title": "Challenge", "url": "/posts/challenge/", "categories": "강의기록, U)Javascript", "tags": "challenge", "date": "2022-02-01 21:40:00 +0900", "snippet": "아주 작고 귀여운 챌린지부터 일단 기록 :pencil2:[220129] S2) 16. Challenge #1Mark와 John이 BMI를 비교하려고 합니다. 각각 체질량계산 공식을 이용하여 계산하세요.BMI 계산 공식 : mass / height *_ 2 = mass / (height _ height) Mark’s, John’s mass와 height를 변수에 할당 각각의 데이터로 BMI계산, 변수에 할당 markHigherBMI 란 이름의 변수 생성, Boolean 형태로 저장const marksWeights = 78; // massMarkconst marksHeights = 1.69; //heightMarkconst markBMI = marksWeights / marksHeights ** 2;console.log(markBMI);const johnsWeight = 92;const johnsHeight = 1.95;const johnsBMI = johnsWeight / johnsHeight ** 2;console.log(johnsBMI);const markHigherBMI = markBMI &amp;gt; johnsBMI;console.log(markHigherBMI);풀이 후 생각한 것 : 변수명을 좀 더 예쁘게.. :open_mouth:[220128] S2) 19. Challenge #2Mark와 John이 BMI를 비교하려고 합니다. 챌린지 1에서 사용한 것을 기반으로 발전시키세요 if를 사용해서 BMI를 비교하고 콘솔에 출력합니다. “Mark’s BMI is higher than John’s!” or “John’s BMI is higher than Mark’s!” 템플릿 리터럴을 사용해서 출력하세요. 예) “Mark’sBMI (28.3) is higher than John’s (23.9)!”//data1const massMark = 78;const heightMark = 1.69;const massJohn = 92;const HeightJohn = 1.95;//data2// const massMark = 95;// const heightMark = 1.88;// const massJohn = 85;// const HeightJohn = 1.76;const BMIMark = massMark / heightMark ** 2;const BMIJohn = massJohn / HeightJohn ** 2;if (BMIMark &amp;gt; BMIJohn) { console.log(`Mark&#39;s BMI (${BMIMark}) is higher than John&#39;s(${BMIJohn})!`);} else { console.log(`John&#39;s BMI (${BMIJohn}) is higher than Mark&#39;s(${BMIMark})!`);}" }, { "title": "연산자", "url": "/posts/operator/", "categories": "TIL, Javascript", "tags": "Javascript, value", "date": "2022-02-01 21:23:00 +0900", "snippet": "Basic operator 기본 연산자Math operators 산술 연산자 + - / *const now = 2022;const ageKim = now - 1991;Assignment operators 할당 연산자 =let x = 10 + 5; // 15x += 10; // x = x + 10 = 25x *= 4; // x = x * 4 = 100x++; // x = x + 1x--;Comparison operators 관계 연산자 &amp;gt; &amp;lt; &amp;gt;= &amp;lt;=const agePark = 2000;const ageKim = 1991;console.log(agePark &amp;gt;= 18);if (ageKim &amp;gt; agePark) { ...}Operator Precedence 연산자 우선순위MDNconst now = 2022;console.log(now - 1991 &amp;gt; now - 2018);관계 연산자 양측의 산술 연산자부터 시행하고 관계값true이 출력된다let x, y;x = y = 25 - 10 - 5; // x = y = 10, x = 10console.log(x, y);25-10-5의 산술식부터 계산되고 y에 할당, x에 할당된다. x=10 y=10" }, { "title": "변수와 값", "url": "/posts/javascript/", "categories": "TIL, Javascript", "tags": "Javascript, value", "date": "2022-02-01 20:33:00 +0900", "snippet": "head 혹은 &amp;lt;/body&amp;gt; 위에 넣는다Values and Variables 값과 변수값은 Object와 primitive로 나뉜다.Primitive Data types 원시 자료형 Number : 부동소수로 정수와 소수let age = 24;let weight = 45.7; String : 문장, 글자, 텍스트let firstName = &quot;John&quot;; Boolean : 논리유형으로 true 혹은 false만 가능let driverLicense = false; Underfined: 변수는 선언했지만 값이 정의되지 않은 상태(empty value)let phoneNumber; Null Symbol, BigInt…Dynamic typing 동적타이핑자바스크립트는 변수의 수동으로 명시하지 않아도 가변적으로 값을 지정할 수 있으며 자료형은 자동으로 처리된다.Indicating the type of value 변수 자료형 확인하기console.log(typeof year);Variable name conventions 변수명 짓기 규칙 camelCase로 네이밍 첫글자 숫자 사용불가 특수문자는 _, &amp;amp;만 가능 예약어 사용불가let, const and var 변수의 선언let : 변수 값이 바뀔 가능성이 있을때 사용한다. 추후 재할당이 가능하다const : 상수. 변수의 값이 바뀌지 않을때 사용한다. 재할당이 불가하며 기본적으로 초기 값이 필요하다var : 기본적으로 변수를 정의하는 오래된 방법(작동함)" }, { "title": "CSS Flex", "url": "/posts/css-flex-grid/", "categories": "TIL, CSS", "tags": "css, flex", "date": "2022-01-31 22:02:00 +0900", "snippet": "Flexbox1차원 레이아웃으로 주로 종, 횡으로 연속된 공간을 만든다.상위 컨테이너 안의 항목이 수평 및 수직으로 자동 정렬 할 수 있다.수직 중앙 정렬 및 등축 column생성하기 등의 문제를 쉽게 해결해준다.float를 대체하기에 완벽하며 코드를 더 적고 깔끔하게 쓸 수 있다.display: Flex.header { display: flex; justify-content: space-between; align-items: center;}Flex container의 속성gap컨테이너 아래 항목간에 공간을 만든다justify-content: flex-start주축을 기준으로 항목을 정렬한다(horizontally)align-items: stretch교차축을 기준으로 항목을 정렬한다(vertically)flex-direction: row주축을 변경한다.footer-nav { list-style: none; display: flex; flex-direction: column; gap: 2.4rem;}Flex items의 속성align-self: auto항목이 독립적으로 align-items속성을 덮어쓴다flex: 0 1 auto순서대로 flex-grow, flex-shrink, flex-basis의 축약으로 사용" } ]
